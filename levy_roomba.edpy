#-------------Setup----------------

import Ed

Ed.EdisonVersion = Ed.V3

Ed.DistanceUnits = Ed.CM
Ed.Tempo = Ed.TEMPO_MEDIUM


def both_leds(state):
    Ed.LeftLed(state)
    Ed.RightLed(state)
    
    
def clamp(speed, min, max):
    if speed < min:
        return min
    elif speed > max:
        return max
    return speed
    
    
def int_to_eddir(speed):
    if speed > 0:
        return Ed.FORWARD
    if speed < 0:
        return Ed.BACKWARD
    return Ed.STOP
    

def int_to_edspeed(speed):
    speed = abs(speed)
    if speed <= 10:
        return clamp(speed, 1, 10)
    return Ed.SPEED_FULL

    
def drive(left, right):
    # left and right are integer wheelspeeds within [-10, 10]
    # Outside this range, the wheel will go full speed.
    Ed.DriveLeftMotor(int_to_eddir(left), int_to_edspeed(left), Ed.DISTANCE_UNLIMITED)
    Ed.DriveRightMotor(int_to_eddir(right), int_to_edspeed(right), Ed.DISTANCE_UNLIMITED)
    

def sleep_ms(ms):  # short alias so you don't have to type the whole thing out
    Ed.TimeWait(ms, Ed.TIME_MILLISECONDS)


def drive_for_ms(left, right, time_ms):
    drive(left, right)
    Ed.TimeWait(time_ms, Ed.TIME_MILLISECONDS)
    

def stop():
    Ed.Drive(Ed.STOP, 1, 1)
    

def irob(obstacle):
    if obstacle == Ed.OBSTACLE_NONE:
        return None
    if obstacle == Ed.OBSTACLE_AHEAD:
        'both'
    if obstacle == Ed.OBSTACLE_LEFT:
        return 'left'
    if obstacle == Ed.OBSTACLE_RIGHT:
        return 'right'


#--------Your code below-----------
# Create the variable LedStatusBlink and set to 0 
LedStatusBlink = 0
Ed.TimeWait(250, Ed.TIME_MILLISECONDS)
#turn on obstacle detection
Ed.ObstacleDetectionBeam(Ed.ON)
#start Edison driving, without a duration
# Ed.Drive(Ed.FORWARD, Ed.SPEED_5, Ed.DISTANCE_UNLIMITED)


def read_obstacle():
    _obstacle = Ed.ReadObstacleDetection()
    
    if _obstacle == Ed.OBSTACLE_NONE:
        Ed.LeftLed(Ed.OFF)
        Ed.RightLed(Ed.OFF)
    if _obstacle == Ed.OBSTACLE_LEFT:
        Ed.LeftLed(Ed.ON)
    if _obstacle == Ed.OBSTACLE_RIGHT:
        Ed.RightLed(Ed.ON)
    if _obstacle == Ed.OBSTACLE_AHEAD:
        Ed.LeftLed(Ed.ON)
        Ed.RightLed(Ed.ON)
        
    return _obstacle


def rand_spin_dir():
    _dir = Ed.Random(0, 1)
    if _dir:
        return Ed.SPIN_LEFT
    else:
        return Ed.SPIN_RIGHT


#loop forever
while True:
#Flash the LED lights on and off
    # LedStatusBlink = LedStatusBlink ^ 1 #Exclusive OR (XOR) 1 with LedStatusBlink to alternate between 0 and 1
    # Ed.LeftLed(LedStatusBlink)
    # Ed.RightLed(LedStatusBlink)
    
    Ed.StartCountDown(Ed.Random(1000, 10000), Ed.TIME_MILLISECONDS)
        
    while Ed.ReadCountDown(Ed.TIME_MILLISECONDS) > 0:
        obstacle = read_obstacle()
        if obstacle == Ed.OBSTACLE_NONE:
            drive(3, 3)
        else:
            stop()
            drive_for_ms(-3, -3, 100)
            stop()
            sleep_ms(50)
            if Ed.OBSTACLE_LEFT:
                Ed.Drive(Ed.SPIN_LEFT, Ed.SPEED_3, Ed.Random(60, 150))
            elif Ed.OBSTACLE_RIGHT:
                Ed.Drive(Ed.SPIN_RIGHT, Ed.SPEED_3, Ed.Random(60, 150))
            elif Ed.OBSTACLE_AHEAD:
                Ed.Drive(rand_spin_dir(), Ed.SPEED_3, Ed.Random(120, 240))
            sleep_ms(10)
            
    if obstacle == Ed.OBSTACLE_NONE:
        Ed.Drive(rand_spin_dir(), Ed.SPEED_3, Ed.Random(90, 270))

    sleep_ms(100)

